{% assign allowed_base_sort_orders = "MANUAL,BEST_SELLING,ALPHA_ASC,ALPHA_DESC,PRICE_DESC,PRICE_ASC,CREATED_DESC,CREATED" | split: "," %}

{% unless allowed_base_sort_orders contains options.base_sort_order__required %}
  {% error %}
    {{ allowed_base_sort_orders | join: ", " | prepend: "Base sort order must be one of: " | json }}
  {% enderror %}
{% endunless %}

{% if event.topic contains "mechanic/" %}
  {% assign collections = array %}

  {% for some_collection in shop.collections %}
    {% assign some_collection_id_string = "" | append: some_collection.id %}
    {% if options.collection_titles_or_ids__array_required contains some_collection_id_string or options.collection_titles_or_ids__array_required contains some_collection.title %}
      {% assign collections[collections.size] = some_collection %}
    {% endif %}
  {% endfor %}

  {% if event.preview %}
    {% capture collections_json %}
      [
        {
          "admin_graphql_api_id": "gid://shopify/Collection/1234567890",
          "sort_order": "manual"
        }
      ]
    {% endcapture %}

    {% assign collections = collections_json | parse_json %}
  {% endif %}

  {% for collection in collections %}
    {% if collection.sort_order != "manual" %}
      {% error %}
        {{ collection.title | json | prepend: " is not configured for manual sorting. Set this collection to be manually sorted, and try again." | json }}
      {% enderror %}
      {% assign collections = array %}
    {% endif %}
  {% endfor %}

  {% for collection in collections %}
    {% action "shopify" %}
      mutation {
        collectionUpdate(
          input: {
            id: {{ collection.admin_graphql_api_id | json }}
            sortOrder: {{ options.base_sort_order__required }}
          }
        ) {
          userErrors {
            field
            message
          }
        }
      }
    {% endaction %}

    {% action "event" %}
      {
        "topic": "user/reorder_collection/stage_2",
        "data": {
          "collection_id": {{ collection.admin_graphql_api_id | json }}
        }
      }
    {% endaction %}
  {% endfor %}
{% elsif event.topic == "user/reorder_collection/stage_2" %}
  {% if event.preview %}
    {% assign event = '{"data": {"collection_id": "gid://shopify/Collection/1234567890"}}' | parse_json %}
  {% endif %}

  {% assign in_stock_product_ids = array %}
  {% assign out_of_stock_product_ids = array %}

  {% assign cursor = nil %}
  {% for n in (0..100) %}
    {% capture query %}
      query {
        collection(id: {{ event.data.collection_id | json }}) {
          products(
            sortKey: COLLECTION_DEFAULT
            first: 250
            after: {{ cursor | json }}
          ) {
            pageInfo {
              hasNextPage
            }
            edges {
              cursor
              node {
                id
                tracksInventory
                totalInventory
              }
            }
          }
        }
      }
    {% endcapture %}

    {% assign result = query | shopify %}

    {% for product_edge in result.data.collection.products.edges %}
      {% if product_edge.node.tracksInventory and product_edge.node.totalInventory <= 0 %}
        {% assign out_of_stock_product_ids[out_of_stock_product_ids.size] = product_edge.node.id %}
      {% else %}
        {% assign in_stock_product_ids[in_stock_product_ids.size] = product_edge.node.id %}
      {% endif %}
    {% endfor %}

    {% if result.data.collection.products.pageInfo.hasNextPage %}
      {% assign cursor = result.data.collection.products.edges.last.cursor %}
    {% else %}
      {% break %}
    {% endif %}
  {% endfor %}

  {% assign all_product_ids = in_stock_product_ids | concat: out_of_stock_product_ids %}

  {% action "shopify" %}
    mutation {
      collectionUpdate(
        input: {
          id: {{ event.data.collection_id | json }}
          sortOrder: MANUAL
        }
      ) {
        userErrors {
          field
          message
        }
      }
    }
  {% endaction %}

  {% action "event" %}
    {
      "topic": "user/reorder_collection/stage_3",
      "data": {
        "collection_id": {{ event.data.collection_id | json }},
        "ordered_product_ids": {{ all_product_ids | json }}
      }
    }
  {% endaction %}
{% elsif event.topic == "user/reorder_collection/stage_3" %}
  {% if event.preview %}
    {% capture event_json %}
      {
        "data": {
          "collection_id": "gid://shopify/Collection/1234567890",
          "ordered_product_ids": [
            "gid://shopify/Product/1234567890",
            "gid://shopify/Product/2345678901",
            "gid://shopify/Product/3456789012",
            "gid://shopify/Product/4567890123",
            "gid://shopify/Product/5678901234",
            "gid://shopify/Product/6789012345"
          ]
        }
      }
    {% endcapture %}

    {% assign event = event_json | parse_json %}
  {% endif %}

  {% assign moves = array %}
  {% for product_id in event.data.ordered_product_ids %}
    {% assign move = hash %}
    {% assign move["id"] = product_id %}
    {% assign move["newPosition"] = forloop.index0 | append: "" %}
    {% assign moves[moves.size] = move %}
  {% endfor %}

  {% assign move_groups = moves | in_groups_of: 250, fill_with: false %}

  {% for move_group in move_groups %}
    {% action "shopify" %}
      mutation {
        collectionReorderProducts(
          id: {{ event.data.collection_id | json }}
          moves: {{ move_group | graphql_arguments }}
        ) {
          userErrors {
            field
            message
          }
        }
      }
    {% endaction %}
  {% endfor %}
{% endif %}